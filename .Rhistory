expression_data <- as.data.frame(lapply(expression_data, as.numeric))
expression_data# Convertimos las columnas que quedan en datos de expresión, sin embargo, tenemos que transponerlo.
class(expression_data)
expression_data <- t(expression_data)
expression_data
se <- SummarizedExperiment(
assays = list(counts = as.matrix(expression_data)),
colData = DataFrame(colData)
)
se
colData(se)
metadata(se)
#Generamos el entorno de trabajo y definimos todas las variables que queremos.
datoshuman_cachexia <- read.csv("human_cachexia.csv", header = TRUE)
dim(datoshuman_cachexia)  # Muestra las dimensiones (número de filas y columnas)
str(datoshuman_cachexia)  # Muestra la estructura, incluyendo el tipo de datos en cada columna
head(datoshuman_cachexia)  # Muestra las primeras filas para ver cómo están organizados los datos
class(datoshuman_cachexia)
colnames(datoshuman_cachexia)
nombres_metadatos<-colnames(datoshuman_cachexia)
nombres_metadatos
class(nombres_metadatos)#Con esto vemos que son caracter
colData <- datoshuman_cachexia[, 1:2]  # Las dos primeras columnas que contienen la ID y condicion
colnames(colData) <- c("PatientID", "Condition")
patientID <- datoshuman_cachexia[, 1]
patientID #Con esto podemos tambien almacenar la ID del paciente, en caso de que en analisis posteriores haya algo destacable en alguno de ellos.
library(SummarizedExperiment)#Con esto llamamos a la libreria que queremos emplear.
help("SummarizedExperiment")
colData <- datoshuman_cachexia[, 1:2]  # Las dos primeras columnas, la ID del paciente y el estado (CTRL o enfermo)
class(colData)
colnames(colData) <- c("PatientID", "Condition")  # Renombrar las columnas
expression_data <- datoshuman_cachexia[, 3:ncol(datoshuman_cachexia)]
expression_data <- as.data.frame(lapply(expression_data, as.numeric))
expression_data# Convertimos las columnas que quedan en datos de expresión, sin embargo, tenemos que transponerlo.
class(expression_data)
expression_data <- t(expression_data)
expression_data
se <- SummarizedExperiment(
assays = list(counts = as.matrix(expression_data)),
colData = DataFrame(colData)
)
se
colData(se)
metadata(se)
#Para la exploración de los datos
# Selecciona los datos de enfermos y control según las filas especificadas
enfermo <- datoshuman_cachexia[2:48, -c(1, 2)]
control <- datoshuman_cachexia[49:78, -c(1, 2)]
# Calcula la media de cada variable para ambos grupos, omitiendo las dos primeras columnas
media_enfermo <- colMeans(enfermo, na.rm = TRUE)
media_control <- colMeans(control, na.rm = TRUE)
# Calcula el cambio absoluto entre las medias de cada grupo
cambios <- abs(media_enfermo - media_control)
# Identifica el nombre de la variable con el mayor cambio
variable_mayor_cambio <- names(cambios)[which.max(cambios)]
valor_mayor_cambio <- max(cambios)
# Imprime los resultados
cat("La variable con el mayor cambio es:", variable_mayor_cambio, "con un cambio de:", valor_mayor_cambio, "\n")
creatinine_enfermo <- datoshuman_cachexia[2:48, "Creatinine"]
creatinine_control <- datoshuman_cachexia[49:78, "Creatinine"]
resultados_ttest <- t.test(creatinine_enfermo, creatinine_control)
resultados_ttest
#Generamos el entorno de trabajo y definimos todas las variables que queremos.
datoshuman_cachexia <- read.csv("human_cachexia.csv", header = TRUE)
dim(datoshuman_cachexia)  # Muestra las dimensiones (número de filas y columnas)
str(datoshuman_cachexia)  # Muestra la estructura, incluyendo el tipo de datos en cada columna
head(datoshuman_cachexia)  # Muestra las primeras filas para ver cómo están organizados los datos
class(datoshuman_cachexia)
colnames(datoshuman_cachexia)
nombres_metadatos<-colnames(datoshuman_cachexia)
nombres_metadatos
class(nombres_metadatos)#Con esto vemos que son caracter
colData <- datoshuman_cachexia[, 1:2]  # Las dos primeras columnas que contienen la ID y condicion
colnames(colData) <- c("PatientID", "Condition")
patientID <- datoshuman_cachexia[, 1]
patientID #Con esto podemos tambien almacenar la ID del paciente, en caso de que en analisis posteriores haya algo destacable en alguno de ellos.
library(SummarizedExperiment)#Con esto llamamos a la libreria que queremos emplear.
help("SummarizedExperiment")
colData <- datoshuman_cachexia[, 1:2]  # Las dos primeras columnas, la ID del paciente y el estado (CTRL o enfermo)
class(colData)
colnames(colData) <- c("PatientID", "Condition")  # Renombrar las columnas
expression_data <- datoshuman_cachexia[, 3:ncol(datoshuman_cachexia)]
expression_data <- as.data.frame(lapply(expression_data, as.numeric))
expression_data# Convertimos las columnas que quedan en datos de expresión, sin embargo, tenemos que transponerlo.
class(expression_data)
expression_data <- t(expression_data)
expression_data
se <- SummarizedExperiment(
assays = list(counts = as.matrix(expression_data)),
colData = DataFrame(colData)
)
se
colData(se)
metadata(se)
#Para la exploración de los datos
# 1º Seleccionamos los datos de enfermos y control según tal y como están ordenados en las filas, excluyendo la ID patient y el estado (ctrl y enfermo).
enfermo <- datoshuman_cachexia[2:48, -c(1, 2)]
control <- datoshuman_cachexia[49:78, -c(1, 2)]
media_enfermo <- colMeans(enfermo, na.rm = TRUE)#Calculamos la media de cada variable para ambos grupos.
media_control <- colMeans(control, na.rm = TRUE)
cambios <- abs(media_enfermo - media_control)# Calculamos el cambio absoluto entre las medias de cada grupo
# Identifica el nombre de la variable con el mayor cambio
variable_mayor_cambio <- names(cambios)[which.max(cambios)]
valor_mayor_cambio <- max(cambios)
# Imprime los resultados
cat("La variable con el mayor cambio es:", variable_mayor_cambio, "con un cambio de:", valor_mayor_cambio, "\n")
#La variable con el mayor cambio es: Creatinine con un cambio de: 4653.473
creatinine_enfermo <- datoshuman_cachexia[2:48, "Creatinine"]
creatinine_control <- datoshuman_cachexia[49:78, "Creatinine"]
resultados_ttest <- t.test(creatinine_enfermo, creatinine_control)
resultados_ttest
head(datoshuman_cachexia)
colData
expression_data
nombres_metadatos
#Generamos el entorno de trabajo y definimos todas las variables que queremos.
datoshuman_cachexia <- read.csv("human_cachexia.csv", header = TRUE)
dim(datoshuman_cachexia)  # Muestra las dimensiones (número de filas y columnas)
str(datoshuman_cachexia)  # Muestra la estructura, incluyendo el tipo de datos en cada columna
head(datoshuman_cachexia)  # Muestra las primeras filas para ver cómo están organizados los datos
class(datoshuman_cachexia)
colnames(datoshuman_cachexia)
nombres_metadatos<-colnames(datoshuman_cachexia)
nombres_metadatos
class(nombres_metadatos)#Con esto vemos que son caracter
colData <- datoshuman_cachexia[, 1:2]  # Las dos primeras columnas que contienen la ID y condicion
colnames(colData) <- c("PatientID", "Muscle.loss")
patientID <- datoshuman_cachexia[, 1]
patientID #Con esto podemos tambien almacenar la ID del paciente, en caso de que en analisis posteriores haya algo destacable en alguno de ellos.
library(SummarizedExperiment)#Con esto llamamos a la libreria que queremos emplear.
help("SummarizedExperiment")
colData <- datoshuman_cachexia[, 1:2]  # Las dos primeras columnas, la ID del paciente y el estado (CTRL o enfermo)
colData
class(colData)
colnames(colData) <- c("PatientID", "Condition")  # Renombrar las columnas
expression_data <- datoshuman_cachexia[, 3:ncol(datoshuman_cachexia)]
expression_data <- as.data.frame(lapply(expression_data, as.numeric))
expression_data# Convertimos las columnas que quedan en datos de expresión, sin embargo, tenemos que transponerlo.
class(expression_data)
expression_data <- t(expression_data)
expression_data
se <- SummarizedExperiment(
assays = list(counts = as.matrix(expression_data)),
colData = DataFrame(colData)
)
se
colData(se)
metadata(se)
colData(se)
#Generamos el entorno de trabajo y definimos todas las variables que queremos.
datoshuman_cachexia <- read.csv("human_cachexia.csv", header = TRUE)
dim(datoshuman_cachexia)  # Muestra las dimensiones (número de filas y columnas)
str(datoshuman_cachexia)  # Muestra la estructura, incluyendo el tipo de datos en cada columna
head(datoshuman_cachexia)  # Muestra las primeras filas para ver cómo están organizados los datos
class(datoshuman_cachexia)
colnames(datoshuman_cachexia)
nombres_metadatos<-colnames(datoshuman_cachexia)
nombres_metadatos
class(nombres_metadatos)#Con esto vemos que son caracter
colData <- datoshuman_cachexia[, 1:2]  # Las dos primeras columnas que contienen la ID y condicion
colnames(colData) <- c("PatientID", "Muscle.loss")
patientID <- datoshuman_cachexia[, 1]
patientID #Con esto podemos tambien almacenar la ID del paciente, en caso de que en analisis posteriores haya algo destacable en alguno de ellos.
library(SummarizedExperiment)#Con esto llamamos a la libreria que queremos emplear.
help("SummarizedExperiment")
colData <- datoshuman_cachexia[, 1:2]  # Las dos primeras columnas, la ID del paciente y el estado (CTRL o enfermo)
colData
class(colData)
colnames(colData) <- c("PatientID", "Condition")  # Renombrar las columnas
expression_data <- datoshuman_cachexia[, 3:ncol(datoshuman_cachexia)]
expression_data <- as.data.frame(lapply(expression_data, as.numeric))
expression_data# Convertimos las columnas que quedan en datos de expresión, sin embargo, tenemos que transponerlo.
class(expression_data)
expression_data <- t(expression_data)
expression_data
se <- SummarizedExperiment(
assays = list(counts = as.matrix(expression_data)),
colData = DataFrame(colData)
)
se
colData(se)
metadata(se)
class(colData)
colnames(datoshuman_cachexia)
colData
enfermo <- datoshuman_cachexia[2:48, -c(1, 2)]
control <- datoshuman_cachexia[49:78, -c(1, 2)]
enfermo
control
summary(se)
se
#Generamos el entorno de trabajo y definimos todas las variables que queremos.
datoshuman_cachexia <- read.csv("human_cachexia.csv", header = TRUE)
dim(datoshuman_cachexia)  # Muestra las dimensiones (número de filas y columnas)
str(datoshuman_cachexia)  # Muestra la estructura, incluyendo el tipo de datos en cada columna
head(datoshuman_cachexia)  # Muestra las primeras filas para ver cómo están organizados los datos
class(datoshuman_cachexia)
colnames(datoshuman_cachexia)
nombres_metadatos<-colnames(datoshuman_cachexia)
nombres_metadatos
class(nombres_metadatos)#Con esto vemos que son caracter
colData <- datoshuman_cachexia[, 1:2]  # Las dos primeras columnas que contienen la ID y condicion
colnames(colData) <- c("PatientID", "Muscle.loss")
patientID <- datoshuman_cachexia[, 1]
patientID #Con esto podemos tambien almacenar la ID del paciente, en caso de que en analisis posteriores haya algo destacable en alguno de ellos.
library(SummarizedExperiment)#Con esto llamamos a la libreria que queremos emplear.
colData <- datoshuman_cachexia[, 1:2]  # Las dos primeras columnas, la ID del paciente y el estado (CTRL o enfermo)
colData
class(colData)
colnames(colData) <- c("PatientID", "Muscle.loss")  # Renombrar las columnas
expression_data <- datoshuman_cachexia[, 3:ncol(datoshuman_cachexia)]
expression_data <- as.data.frame(lapply(expression_data, as.numeric))
expression_data# Convertimos las columnas que quedan en datos de expresión, sin embargo, tenemos que transponerlo.
class(expression_data)
expression_data <- t(expression_data)
expression_data
se <- SummarizedExperiment(
assays = list(counts = as.matrix(expression_data)),
colData = DataFrame(colData)
)
se
colData(se)
metadata(se)
expression_data
class(colData)
summary(datoshuman_cachexia)
library(ggplot2)
library(ggplot2)
summary(datoshuman_cachexia)
library(ggplot2)
enfermo <- datoshuman_cachexia[2:48, -c(1, 2)]
control <- datoshuman_cachexia[49:78, -c(1, 2)]
plot("enfermo", "control")
boxplot("enfermo", "control")
ggplot("nfermo", "control")
ggplot("enfermo", "control")
creatinine_enfermo
creatinine_control
library(dbplyr)
library(dbplyr)
saphiro.test(creatinine_control)
shapiro.test(creatinine_control)
shapiro.test(creatinine_control)
shapiro.test(creatinine_enfermo)
resultados_ttest
mean(creatinine_control)
mean(creatinine_enfermo)
mean(creatinine_enfermo)
mean(creatinine_enfermo)
mean(creatinine_enfermo)
mean(creatinine_control)
creatinine_control
creatinine_enfermo <- datoshuman_cachexia[2:48, "Creatinine"]
creatinine_control <- datoshuman_cachexia[49:77, "Creatinine"]
creatinine_enfermo
creatinine_control
shapiro.test(creatinine_control)
shapiro.test(creatinine_enfermo)
resultados_ttest <- t.test(creatinine_enfermo, creatinine_control)
resultados_ttest
head(datoshuman_cachexia)
mean(creatinine_enfermo)
mean(creatinine_control)
resultados_ttest
mean(creatinine_enfermo)
mean(creatinine_control)
plot(creatinine_control)
summary(datoshuman_cachexia)
library(ggplot2)
enfermo <- datoshuman_cachexia[2:48, -c(1, 2)]
control <- datoshuman_cachexia[49:77, -c(1, 2)]
#Para la exploración de los datos
# 1º Seleccionamos los datos de enfermos y control según tal y como están ordenados en las filas, excluyendo la ID patient y el estado (ctrl y enfermo).
enfermo <- datoshuman_cachexia[2:48, -c(1, 2)]
control <- datoshuman_cachexia[49:78, -c(1, 2)]
enfermo
control
media_enfermo <- colMeans(enfermo, na.rm = TRUE)#Calculamos la media de cada variable para ambos grupos.
media_control <- colMeans(control, na.rm = TRUE)
cambios <- abs(media_enfermo - media_control)# Calculamos el cambio absoluto entre las medias de cada grupo
# 2º Identificamos con el nombre la variable con el mayor cambio
variable_mayor_cambio <- names(cambios)[which.max(cambios)]
valor_mayor_cambio <- max(cambios)
cat("La variable con el mayor cambio es:", variable_mayor_cambio, "con un cambio de:", valor_mayor_cambio, "\n")
#La variable con el mayor cambio es: Creatinine con un cambio de: 4653.473
creatinine_enfermo <- datoshuman_cachexia[2:48, "Creatinine"]
creatinine_control <- datoshuman_cachexia[49:77, "Creatinine"]
creatinine_enfermo
creatinine_control
library(dbplyr)
shapiro.test(creatinine_control)
shapiro.test(creatinine_enfermo)
resultados_ttest <- t.test(creatinine_enfermo, creatinine_control)
resultados_ttest
head(datoshuman_cachexia)
mean(creatinine_enfermo)
mean(creatinine_control)
# Librería necesaria
library(ggplot2)
# Supongamos que ya tienes las variables `creatinine_enfermo` y `creatinine_control`
# Crea un data frame para combinarlas y añadir una etiqueta de grupo
datos_creatinina <- data.frame(
Creatinine = c(creatinine_enfermo, creatinine_control),
Grupo = rep(c("Enfermo", "Control"), c(length(creatinine_enfermo), length(creatinine_control)))
)
# Histograma de comparación
ggplot(datos_creatinina, aes(x = Creatinine, fill = Grupo)) +
geom_histogram(alpha = 0.6, position = "identity", bins = 30) +
labs(title = "Distribución de Creatinina en Enfermos y Controles",
x = "Creatinine", y = "Frecuencia") +
scale_fill_manual(values = c("blue", "orange")) +
theme_minimal()
# Gráfico de densidad
ggplot(datos_creatinina, aes(x = Creatinine, color = Grupo, fill = Grupo)) +
geom_density
# Crear un data frame para combinarlas y etiquetar cada grupo
datos_creatinina <- data.frame(
Creatinine = c(creatinine_enfermo, creatinine_control),
Grupo = rep(c("Enfermo", "Control"), c(length(creatinine_enfermo), length(creatinine_control)))
)
# Generar el boxplot
ggplot(datos_creatinina, aes(x = Grupo, y = Creatinine, fill = Grupo)) +
geom_boxplot(alpha = 0.7, width = 0.5) +
labs(title = "Boxplot de Creatinina en Enfermos y Controles",
x = "Grupo", y = "Creatinine") +
scale_fill_manual(values = c("blue", "orange")) +
theme_minimal()
datos_creatinina <- data.frame(
Creatinine = c(creatinine_enfermo, creatinine_control),
Grupo = rep(c("Enfermo", "Control"), c(length(creatinine_enfermo), length(creatinine_control)))
)
ggplot(datos_creatinina, aes(x = Grupo, y = Creatinine, fill = Grupo)) +
geom_boxplot(alpha = 0.7, width = 0.5) +
labs(title = "Boxplot de Creatinina en Enfermos y Controles",
x = "Grupo", y = "Creatinine") +
scale_fill_manual(values = c("blue", "orange")) +
theme_minimal()
shapiro.test(creatinine_control)
shapiro.test(creatinine_enfermo)
se
head(se)
colData
class(colData)
colnames
colnames(colData) <- c("PatientID", "Muscle.loss")  # Renombramos las columnas
colnames
showMethods(colnames)
#Generamos el entorno de trabajo y definimos todas las variables que queremos.
datoshuman_cachexia <- read.csv("human_cachexia.csv", header = TRUE)
dim(datoshuman_cachexia)  # Muestra las dimensiones (número de filas y columnas)
str(datoshuman_cachexia)  # Muestra la estructura, incluyendo el tipo de datos en cada columna
head(datoshuman_cachexia)  # Muestra las primeras filas para ver cómo están organizados los datos
class(datoshuman_cachexia)
colnames(datoshuman_cachexia)
nombres_metadatos<-colnames(datoshuman_cachexia)
nombres_metadatos
class(nombres_metadatos)#Con esto vemos que son caracter
colData <- datoshuman_cachexia[, 1:2]  # Las dos primeras columnas que contienen la ID y condicion
colnames(colData) <- c("PatientID", "Muscle.loss")
patientID <- datoshuman_cachexia[, 1]
patientID #Con esto podemos tambien almacenar la ID del paciente, en caso de que en analisis posteriores haya algo destacable en alguno de ellos.
library(BiocGenerics)
library(SummarizedExperiment)#Con esto llamamos a la libreria que queremos emplear.
help("SummarizedExperiment")
colData <- datoshuman_cachexia[, 1:2]  # Las dos primeras columnas, la ID del paciente y el estado (CTRL o enfermo)
colData
class(colData)
colnames(colData) <- c("PatientID", "Muscle.loss")  # Renombramos las columnas
colnames
showMethods(colnames)
expression_data <- datoshuman_cachexia[, 3:ncol(datoshuman_cachexia)]
expression_data <- as.data.frame(lapply(expression_data, as.numeric))
expression_data# Convertimos las columnas que quedan en datos de expresión, sin embargo, tenemos que transponerlo.
class(expression_data)
expression_data <- t(expression_data)
expression_data
se <- SummarizedExperiment(
assays = list(counts = as.matrix(expression_data)),
colData = DataFrame(colData)
)
se
head(se)
colData(se)
metadata(se)
se
head(se)
colData
colnames(datoshuman_cachexia)
# Filtrar las filas de enfermos y controles
enfermos <- datoshuman_cachexia[2:48, ]
controles <- datoshuman_cachexia[49:78, ]
# Calcular la media de cada variable para enfermos y controles
medias_enfermos <- colMeans(enfermos[, -c(1, 2)], na.rm = TRUE)
medias_controles <- colMeans(controles[, -c(1, 2)], na.rm = TRUE)
# Calcular la diferencia absoluta entre las medias de enfermos y controles
diferencias <- abs(medias_enfermos - medias_controles)
# Ordenar las variables por las mayores diferencias
variables_cambio <- sort(diferencias, decreasing = TRUE)
# Seleccionar las tres variables con mayor cambio
top_3_variables <- names(variables_cambio)[1:3]
# Mostrar el resultado
top_3_variables
medias_enfermos <- colMeans(enfermo[, -c(1, 2)], na.rm = TRUE)
medias_controles <- colMeans(control[, -c(1, 2)], na.rm = TRUE)
# Calcular la diferencia absoluta entre las medias de enfermos y controles
diferencias <- abs(medias_enfermos - medias_controles)
# Ordenar las variables por las mayores diferencias
variables_cambio <- sort(diferencias, decreasing = TRUE)
# Seleccionar las tres variables con mayor cambio
top_3_variables <- names(variables_cambio)[1:3]
# Mostrar el resultado
top_3_variables
medias_enfermos <- colMeans(enfermo[, -c(1, 2)], na.rm = TRUE)
medias_controles <- colMeans(control[, -c(1, 2)], na.rm = TRUE)
diferencias <- abs(medias_enfermos - medias_controles)
variables_cambio <- sort(diferencias, decreasing = TRUE)
top_3_variables <- names(variables_cambio)[1:3]
# Mostrar el resultado
top_3_variables
medias_enfermos <- colMeans(enfermo[, -c(1, 2)], na.rm = TRUE)
medias_controles <- colMeans(control[, -c(1, 2)], na.rm = TRUE)
diferencias <- abs(medias_enfermos - medias_controles)
variables_cambio <- sort(diferencias, decreasing = TRUE)
top_3_variables <- names(variables_cambio)[1:3]
# Mostrar el resultado
top_3_variables
datos_creatinina <- data.frame(
Creatinine = c(creatinine_enfermo, creatinine_control),
Grupo = rep(c("Enfermo", "Control"), c(length(creatinine_enfermo), length(creatinine_control)))
)
ggplot(datos_creatinina, aes(x = Grupo, y = Creatinine, fill = Grupo)) +
geom_boxplot(alpha = 0.7, width = 0.5) +
labs(title = "Boxplot de Creatinina en Enfermos y Controles",
x = "Grupo", y = "Creatinine") +
scale_fill_manual(values = c("blue", "orange")) +
theme_minimal()
medias_enfermos <- colMeans(enfermo[, -c(1, 2)], na.rm = TRUE)
medias_controles <- colMeans(control[, -c(1, 2)], na.rm = TRUE)
diferencias <- abs(medias_enfermos - medias_controles)
variables_cambio <- sort(diferencias, decreasing = TRUE)
Las_tres_variables <- names(variables_cambio)[1:3]
# Mostrar el resultado
top_3_variables
datos_creatinina <- data.frame(
Creatinine = c(creatinine_enfermo, creatinine_control),
Grupo = rep(c("Enfermo", "Control"), c(length(creatinine_enfermo), length(creatinine_control)))
)
ggplot(datos_creatinina, aes(x = Grupo, y = Creatinine, fill = Grupo)) +
geom_boxplot(alpha = 0.7, width = 0.5) +
labs(title = "Boxplot de Creatinina en Enfermos y Controles",
x = "Grupo", y = "Creatinine") +
scale_fill_manual(values = c("blue", "orange")) +
theme_minimal()
Las_tres_variables <- names(variables_cambio)[1:3]
Las_tres_variables
Hippurate_enfermo <- datoshuman_cachexia[2:48, "Hippurate"]
Hippurate_control <- datoshuman_cachexia[49:77, "Hippurate"]
Hippurate_enfermo
Hippurate_control
library(dbplyr)
shapiro.test(Hippurate_control)
shapiro.test(Hippurate_enfermo)
shapiro.test(Hippurate_control)
shapiro.test(Hippurate_enfermo)
Test_Hippurate <- t.test(Hippurate_control, Hippurate_enfermo)
Test_Hippurate
mean(Hippurate_control)
mean(Hippurate_enfermo)
datos_Hippurate <- data.frame(
Hippurate = c(Hippurate_control, Hippurate_controll),
Grupo = rep(c("Enfermo", "Control"), c(length(Hippurate_enfermo), length(Hippurate_controll)))
)
datos_Hippurate <- data.frame(
Hippurate = c(Hippurate_control, Hippurate_control),
Grupo = rep(c("Enfermo", "Control"), c(length(Hippurate_enfermo), length(Hippurate_controll)))
)
datos_Hippurate <- data.frame(
Hippurate = c(Hippurate_control, Hippurate_control),
Grupo = rep(c("Enfermo", "Control"), c(length(Hippurate_enfermo), length(Hippurate_control)))
)
Test_Hippurate
Las_tres_variables
Citrate_enfermo <- datoshuman_cachexia[2:48, "Citrate"]
Citrate_control <- datoshuman_cachexia[49:77, "Citrate"]
Citrate_enfermo
Citrate_control
mean(Citratee_control)
Citrate_enfermo <- datoshuman_cachexia[2:48, "Citrate"]
Citrate_control <- datoshuman_cachexia[49:77, "Citrate"]
Citrate_enfermo
Citrate_control
mean(Citrate_control)
mean(Citrate_enfermo)
mean(Citrate_control)
mean(Citrate_enfermo)
shapiro.test(Citrate_control)
shapiro.test(Citrate_enfermo)
Citrate_enfermo <- datoshuman_cachexia[2:48, "Citrate"]
Citrate_control <- datoshuman_cachexia[49:77, "Citrate"]
Citrate_enfermo
Citrate_control
mean(Citrate_control)
mean(Citrate_enfermo)
shapiro.test(Citrate_control)
shapiro.test(Citrate_enfermo)
Test_Citrate <- t.test(Citrate_enfermo, Citrate_control)
Test_Citrate
Test_Hippurate
Test_Citrate
cat("La variable con el mayor cambio es:", variable_mayor_cambio, "con un cambio de:", valor_mayor_cambio, "\n")
valor_mayor_cambio <- max(cambios)
valor_mayor_cambio
